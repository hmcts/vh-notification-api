name: $(Date:yyyyMMddhhmm)-$(Rev:r)

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: master
      endpoint: hmcts
      
trigger: none

pr:
  - master

variables:
  - group: vh-github-app-credentials
  - group: govuk-notify-dev
  - name: app_path
    value: 'NotificationApi'
  - group: vh-notification-api
  - name: run_acceptance_tests
    value: false

stages:
#####################################################
# CI Build Checks. ##################################
  - stage: CI_Build
    displayName: CI Build
    variables: 
      - template: variables/shared.yaml
        parameters:
          env: ''
    jobs:
      - job: CI_Helm
        displayName: "Helm CI"
        steps:
          - checkout: self

          - template: templates\Containerisation\helm\helm-lint.yaml@azTemplates
            parameters:
              chartPath: ${{ variables.chartPath }}
              chartValuesPath: ${{ variables.chartPath }}

      - job: UnitTests
        displayName: "Unit Tests"
        steps:
          - checkout: self
          
          - template: stages\dotnet-tests\unit-tests.yml@azTemplates
            parameters:
              nugetConfigPath: ${{ variables.app_path }}
              unitTestProjectPath: "${{ variables.app_path }}/${{ variables.app_path }}.UnitTests"
              coverletCoverageExclusions:
                - "[${{ variables.app_path }}.*Tests?]*"
                - "[${{ variables.app_path }}]Startup"
                - "[*]${{ variables.app_path }}.Common.*"
                - "[Testing.Common]*"

      - job: SonarCloud
        displayName: SonarCloud Test Analysis
        steps:
          - template: templates/sonarCloud/prepare.yml@azTemplates
            parameters:
              sonarCloud_ExtraProperties: |
                sonar.cs.opencover.reportsPaths=$(Common.TestResultsDirectory)\Coverage\coverage.opencover.xml
                sonar.coverage.exclusions=${{ variables.sonar_exclusion }}

          - bash: |
              cd NotificationApi/NotificationApi.UnitTests
              dotnet build NotificationApi.UnitTests.csproj
            displayName: Build .NET Project(s)

          - template: templates/sonarCloud/runAnalysis.yml@azTemplates

#####################################################
# Pre Steps. ########################################
# Build Docker Image & Generate EF Script. ##########
  - stage: Dock
    displayName: Build Notification API
    variables: 
      - group: aks-cluster-info
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - group: vh-github-app-credentials
    jobs:
      - job: Dock
        displayName: "Build and Push Image ${{ variables.git_repo_name }}"
        steps:
          - checkout: self

          - template: templates\Github\get-app-token.yaml@azTemplates
            parameters:
              privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
              appId: $(gh_app_app_id)

          - template: templates\Github\bump-chart-versions.yaml@azTemplates
            parameters:
              chartName: ${{ variables.chartName }}
              chartPath: $(Build.SourcesDirectory)
              chartBranch: $(System.PullRequest.SourceBranch)
              githubToken: $(githubappinstall.token)
              githubUsername: $(gh_app_name)
              githubEmail: "$(gh_app_app_id)+$(gh_app_name)[bot]@users.noreply.github.com"
          
          - bash: |
              sed -i "s|</configuration>|<packageSourceCredentials><vh-packages><add key=\"Username\" value=\"PAT\" /><add key=\"ClearTextPassword\" value=\"$(System.AccessToken)\" /></vh-packages></packageSourceCredentials></configuration>|" nuget.sds.config
            displayName: Add NuGet Feed Authentication
            workingDirectory: NotificationApi

          - template: templates\Containerisation\docker\docker-compose.yaml@azTemplates
            parameters:
              azureSubscription: ${{ variables.acrSubscription }}
              acrName: ${{ variables.acrName }}
              repositoryName:  ${{ variables.repositoryName }}

          - template: templates\Containerisation\docker\docker-push-azure.yaml@azTemplates
            parameters:
              azureSubscription: ${{ variables.acrSubscription }}
              acrName: ${{ variables.acrName }}
              repositoryName:  ${{ variables.repositoryName }}
              imageName: "${{ replace(variables.git_repo_name, '-', '') }}"
              imageTags:
                - '${{ variables.prTagName }}'

      - job: Generate_Entity_Framework_Script
        displayName: "Generate Entity Framework Script"
        steps:

        - template: templates/Database/EntityFramework/generate-script.yaml@azTemplates
          parameters:
            outputPath: $(Build.StagingDirectory)
            contextName: ${{ variables.efContextName }}
            workingPath: $(System.DefaultWorkingDirectory)/NotificationApi/NotificationApi
            projectName: ${{ variables.efProjectName }}

      - job: package_nuget
        displayName: "Package NuGet Packages"
        dependsOn: Dock
        steps:
          - template: templates\dotnet\package-nuget-packages.yml@azTemplates
            parameters:
              nugetProjectPath: "NotificationApi/${{ variables.nuget_package_name }}"
              vstsFeed: "${{ variables.nuget_org_name }}/${{ variables.nuget_feed_name }}"
              gitVersionConfigPath: ${{ variables.git_version_config_path }}

      - ${{ if eq(variables.run_acceptance_tests, true) }}:
        - job: PublishAcceptanceTests
          displayName: Publish Acceptance Tests 
          variables:
            projectPath: NotificationApi/NotificationApi
          steps:
          - template: templates\dotnet\publish-acceptance-tests.yml@azTemplates
            parameters:
              coreProjectPath: $(projectPath)
              nugetProjectPath: $(projectPath)
              nugetConfigPath: NotificationApi
              useNugetConfig: true
          
#####################################################
# Run Entity Framework Dev. #########################
  - stage: Run_Entity_Framework_Dev
    dependsOn: Dock
    displayName: Run Entity Framework Dev
    variables:
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
    jobs:
      - job: Run_Entity_Framework_Dev
        pool:
          vmImage: 'windows-latest' # This Job Must be Run on Windows
        displayName: Run Entity Framework Dev
        steps:
          - download: current
            displayName: Download Sql Artifact

          - template: templates/Database/EntityFramework/run-entity-framework.yaml@azTemplates
            parameters:
              sqlServerResourceGroup: ${{ variables.vhResourceGroup }}
              sqlServerName: ${{ variables.vhSQLServerName }}
              databaseName: ${{ variables.NotificationApiDbName }}
              azureSubscription: ${{ variables.subscriptionName }}
              sqlScriptLocation: "$(Pipeline.Workspace)/${{ variables.efContextName }}-$(Build.BuildId)/${{ variables.efContextName }}.sql"
              kvfirewallRequired: false
              kvName: ${{ variables.vhKeyVault }}
              kvSqlPasswordSecret: ${{ variables.vhSqlPasswordSecret }}
              kvSqlUsernameSecret: ${{ variables.vhSqlUsernameSecret }}

#####################################################
# Deploy Helm Chart to Dev. ######################### 
  - stage: Install
    dependsOn: Run_Entity_Framework_Dev
    displayName: Deploy Helm Chart Dev AKS
    variables:
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - name: dnsRecordName
        value: vh-${{ variables.git_repo_name }}-${{ variables.prTagPrefix }}
    jobs:
      - job: helm_uninstall
        displayName: Uninstall Helm from Dev
        steps:

          - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
            parameters:
              subscriptionName: "${{ variables.subscriptionName }}"
              environment: ${{ variables.env }}
            
          - template: templates/Containerisation/helm/helm-uninstall.yaml@azTemplates
            parameters:
              namespace: 'vh'
              releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
              azureSubscription: "${{ variables.subscriptionName }}"
              aksResourceGroupName: "$(aksCluster.resourceGroup)"
              aksClusterName: "$(aksCluster.name)"
      - job: aks_push
        displayName: Deploy To Dev AKS
        steps:

          - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
            parameters:
              subscriptionName: "${{ variables.subscriptionName }}"
              environment: ${{ variables.env }}
          - template: templates/Containerisation/helm/helm-install.yaml@azTemplates
            parameters:
              privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
              appId: $(gh_app_app_id)
              envValuesTemplatePath: ${{ variables.envValuesTemplatePath }}
              envValuesPath: ${{ variables.envValuesPath }}
              acrName: ${{ variables.acrName }}
              repositoryName: ${{ variables.repositoryName }}
              prTagName: ${{ variables.prTagName }}
              releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
              dnsRecordName: ${{ variables.dnsRecordName }}
              dnsZone: ${{ variables.dnsZone }}
              env: ${{ variables.env }}
              chartName: ${{ variables.chartName }}
              chartPath: ${{ variables.chartPath }}
              subscriptionName: "${{ variables.subscriptionName }}"
              aksResourceGroupName: "$(aksCluster.resourceGroup)"
              aksClusterName: "$(aksCluster.name)"
              dnsSubscriptionName: "${{ variables.dnsZoneSubscription }}"
              dnsResourceGroupName: "${{ variables.dnsZoneResourceGroup }}"

      - ${{ if eq(variables.run_acceptance_tests, true) }}:
        - job: AcceptanceTestsDev
          displayName: Acceptance Tests Dev
          steps:
          - template: templates/dotnet/run-acceptance-tests.yml@azTemplates
            parameters:
              environment: ${{ variables.env }}
              azureSubscription: ${{ variables.subscriptionName }}
              acceptanceTestSettings:
              - name: Services__NotificationApiUrl
                value: "https://vh-notification-api.dev.platform.hmcts.net"
              - name: ApplicationInsights__InstrumentationKey
                value: applicationinsights--instrumentationkey
                keyVaultName: vh-infra-core-${{ variables.env }}
                secret: true
              - name: AzureAd__ClientId
                value: azuread--clientid
                keyVaultName: vh-notification-api-${{ variables.env }}
                secret: true
              - name: AzureAd__ClientSecret
                value: azuread--clientsecret
                keyVaultName: vh-notification-api-${{ variables.env }}
                secret: true
              - name: AzureAd__TenantId
                value: azuread--tenantid
                keyVaultName: vh-infra-core-${{ variables.env }}
                secret: true
              - name: Services__NotificationApiResourceId
                value: azuread--identifieruri
                keyVaultName: vh-notification-api-${{ variables.env }}
                secret: true
              # GOV Notify Configuration
              - name: NotifyConfiguration__ApiKey
                value: $(notify-api-key)
              - name: NotifyConfiguration__CallbackSecret
                value: $(notify-callback-secret)
              - name: NotifyConfiguration__Environment
                value: $(notify-environment)      
              - name: NotifyConfiguration__CreateIndividual
                value: $(CreateIndividual)
              - name: NotifyConfiguration__CreateRepresentative
                value: $(CreateRepresentative)
              - name: NotifyConfiguration__PasswordReset
                value: $(PasswordReset)
              - name: NotifyConfiguration__HearingConfirmationLip
                value: $(HearingConfirmationLip)
              - name: NotifyConfiguration__HearingConfirmationRepresentative
                value: $(HearingConfirmationRepresentative)
              - name: NotifyConfiguration__HearingConfirmationJudge
                value: $(HearingConfirmationJudge)
              - name: NotifyConfiguration__HearingConfirmationJoh
                value: $(HearingConfirmationJoh)
              - name: NotifyConfiguration__HearingConfirmationLipMultiDay
                value: $(HearingConfirmationLipMultiDay)
              - name: NotifyConfiguration__HearingConfirmationRepresentativeMultiDay
                value: $(HearingConfirmationRepresentativeMultiDay)
              - name: NotifyConfiguration__HearingConfirmationJudgeMultiDay
                value: $(HearingConfirmationJudgeMultiDay)
              - name: NotifyConfiguration__HearingConfirmationJohMultiDay
                value: $(HearingConfirmationJohMultiDay)
              - name: NotifyConfiguration__HearingAmendmentLip
                value: $(HearingAmendmentLip)
              - name: NotifyConfiguration__HearingAmendmentRepresentative
                value: $(HearingAmendmentRepresentative)
              - name: NotifyConfiguration__HearingAmendmentJudge
                value: $(HearingAmendmentJudge)
              - name: NotifyConfiguration__HearingAmendmentJoh
                value: $(HearingAmendmentJoh)
              - name: NotifyConfiguration__HearingReminderLip
                value: $(HearingReminderLip)
              - name: NotifyConfiguration__HearingReminderRepresentative
                value: $(HearingReminderRepresentative)
              - name: NotifyConfiguration__HearingReminderJoh
                value: $(HearingReminderJoh)
              - name: NotifyConfiguration__HearingConfirmationEJudJudge
                value: $(HearingConfirmationEJudJudge)
              - name: NotifyConfiguration__HearingConfirmationEJudJudgeMultiDay
                value: $(HearingConfirmationEJudJudgeMultiDay)
              - name: NotifyConfiguration__HearingAmendmentEJudJudge
                value: $(HearingAmendmentEJudJudge)
              - name: NotifyConfiguration__HearingAmendmentEJudJoh
                value: $(HearingAmendmentEJudJoh)
              - name: NotifyConfiguration__HearingReminderEJudJoh
                value: $(HearingReminderEJudJoh)
              - name: NotifyConfiguration__HearingConfirmationEJudJoh
                value: $(HearingConfirmationEJudJoh)
              - name: NotifyConfiguration__HearingConfirmationEJudJohMultiDay
                value: $(HearingConfirmationEJudJohMultiDay)
              - name: NotifyConfiguration__EJudJohDemoOrTest
                value: $(EJudJohDemoOrTest)
              - name: NotifyConfiguration__EJudJudgeDemoOrTest
                value: $(EJudJudgeDemoOrTest)
              - name: NotifyConfiguration__JudgeDemoOrTest
                value: $(JudgeDemoOrTest)
              - name: NotifyConfiguration__ParticipantDemoOrTest
                value: $(ParticipantDemoOrTest)
              - name: NotifyConfiguration__TelephoneHearingConfirmation
                value: $(TelephoneHearingConfirmation)
              - name: NotifyConfiguration__TelephoneHearingConfirmationMultiDay
                value: $(TelephoneHearingConfirmationMultiDay)
              - name: NotifyConfiguration__CreateStaffMember
                value: $(CreateStaffMember)
              - name: NotifyConfiguration__HearingAmendmentStaffMember
                value: $(HearingAmendmentStaffMember)
              - name: NotifyConfiguration__HearingConfirmationStaffMember
                value: $(HearingConfirmationStaffMember)
              - name: NotifyConfiguration__HearingConfirmationStaffMemberMultiDay
                value: $(HearingConfirmationStaffMemberMultiDay)
              - name: NotifyConfiguration__StaffMemberDemoOrTest
                value: $(StaffMemberDemoOrTest)
              - name: NotifyConfiguration__NewHearingReminderLIP
                value: $(NewHearingReminderLIP)
              - name: NotifyConfiguration__NewHearingReminderRepresentative
                value: $(NewHearingReminderRepresentative)
              - name: NotifyConfiguration__NewHearingReminderJOH
                value: $(NewHearingReminderJOH)
              - name: NotifyConfiguration__NewHearingReminderEJUD
                value: $(NewHearingReminderEJUD)
                
#####################################################
# Deploy Nuget Packages. #########################
  - stage: Push_Nuget
    dependsOn: Install
    displayName: Deploy NuGet Packages
    variables:
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
    jobs: 
      - job: Publish_Nuget
        displayName: Publish NuGet Packages
        steps:
          - template: templates\dotnet\push-nuget-packages.yml@azTemplates
            parameters:
              vstsFeed: "${{ variables.nuget_org_name }}/${{ variables.nuget_feed_name }}"

#####################################################
# Manual Approval To Demo. ##########################
  - stage: Wait
    dependsOn: Push_Nuget
    jobs:
      - job: Wait
        displayName: "Approve Release Demo"
        pool: server
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              instructions: 'Please approve the release of PR-$(System.PullRequest.PullRequestNumber) to the Demo environment to resume'
              onTimeout: 'reject'

#####################################################
# Run Entity Framework Demo. ########################
  - stage: Run_Entity_Framework_Demo
    dependsOn: Wait
    displayName: Run Entity Framework Demo
    variables:
      - template: variables/qa.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
    jobs:
      - job: Run_Entity_Framework_Demo
        pool:
         vmImage: 'windows-latest'
        displayName: Run Entity Framework Demo
        steps:
          - download: current
            displayName: Download Sql Artifact

          - template: templates/Database/EntityFramework/run-entity-framework.yaml@azTemplates
            parameters:
              sqlServerResourceGroup: ${{ variables.vhResourceGroup }}
              sqlServerName: ${{ variables.vhSQLServerName }}
              databaseName: ${{ variables.notificationApiDbName }}
              azureSubscription: ${{ variables.subscriptionName }}
              sqlScriptLocation: "$(Pipeline.Workspace)/${{ variables.efContextName }}-$(Build.BuildId)/${{ variables.efContextName }}.sql"
              kvfirewallRequired: false
              kvName: ${{ variables.vhKeyVault }}
              kvSqlPasswordSecret: ${{ variables.vhSqlPasswordSecret }}
              kvSqlUsernameSecret: ${{ variables.vhSqlUsernameSecret }}

#####################################################
# Deploy Helm Chart to QA. ##########################
  - stage: Install_Demo
    displayName: Deploy Helm Chart Demo AKS
    dependsOn: Run_Entity_Framework_Demo
    variables:
      - template: variables/qa.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - name: dnsRecordName
        value: vh-${{ variables.git_repo_name }}-${{ variables.prTagPrefix }}
    jobs:
      - job: helm_uninstall
        displayName: Uninstall Helm from Demo
        steps:
          - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
            parameters:
              subscriptionName: "${{ variables.subscriptionName }}"
              environment: ${{ variables.env }}
              
          - template: templates/Containerisation/helm/helm-uninstall.yaml@azTemplates
            parameters:
              namespace: 'vh'
              releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
              azureSubscription: "${{ variables.subscriptionName }}"
              aksResourceGroupName: "$(aksCluster.resourceGroup)"
              aksClusterName: "$(aksCluster.name)"
      - job: aks_push
        displayName: Deploy To Demo AKS
        steps:
        - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
          parameters:
            subscriptionName: "${{ variables.subscriptionName }}"
            environment: ${{ variables.env }}
        - template: templates/Containerisation/helm/helm-install.yaml@azTemplates
          parameters:
            privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
            appId: $(gh_app_app_id)
            envValuesTemplatePath: ${{ variables.envValuesTemplatePath }}
            envValuesPath: ${{ variables.envValuesPath }}
            acrName: ${{ variables.acrName }}
            repositoryName: ${{ variables.repositoryName }}
            prTagName: ${{ variables.prTagName }}
            releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
            dnsRecordName: ${{ variables.dnsRecordName }}
            dnsZone: ${{ variables.dnsZone }}
            env: ${{ variables.env }}
            chartName: ${{ variables.chartName }}
            chartPath: ${{ variables.chartPath }}
            subscriptionName: "${{ variables.subscriptionName }}"
            aksResourceGroupName: "$(aksCluster.resourceGroup)"
            aksClusterName: "$(aksCluster.name)"
            dnsSubscriptionName: "${{ variables.dnsZoneSubscription }}"
            dnsResourceGroupName: "${{ variables.dnsZoneResourceGroup }}"